---
import type { CollectionEntry } from "astro:content"
import BlogHero from "@/components/blog/Hero.astro"
import TOC from "@/components/blog/TOC.astro"
import BaseLayout from "./Base.astro"

interface Props {
	post: CollectionEntry<"post">
}

const { post } = Astro.props
const {
	data: { description, ogImage, publishDate, title, updatedDate },
	slug,
} = post
const socialImage = ogImage ?? `/og-image/${slug}.png`
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString()
const { headings } = await post.render()
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<div>
		{!!headings.length && <TOC headings={headings} />}
		<article>
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div>
				<slot />
			</div>
		</article>
	</div>
	<button
		aria-label="Back to Top"
		data-show="false"
		id="to-top-btn"
		><svg
			aria-hidden="true"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString()
		})
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 })
	})

	const observer = new IntersectionObserver(callback)
	observer.observe(targetHeader)
</script>
