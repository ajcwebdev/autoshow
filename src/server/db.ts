// src/server/db.ts

import { DatabaseSync } from 'node:sqlite'

// Initialize the database connection
export const db = new DatabaseSync('show_notes.db', { open: true })

// Create the show_notes table if it doesn't exist
db.exec(`
  CREATE TABLE IF NOT EXISTS show_notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    showLink TEXT,
    channel TEXT,
    channelURL TEXT,
    title TEXT NOT NULL,
    description TEXT,
    publishDate TEXT NOT NULL,
    coverImage TEXT,
    frontmatter TEXT,
    prompt TEXT,
    transcript TEXT,
    llmOutput TEXT
  )
`)

/**
 * Insert new show note row into database.
 *
 * @param {string} showLink - The link to the show or audio/video file.
 * @param {string} channel - The name of the channel or show.
 * @param {string} channelURL - The URL of the channel or show.
 * @param {string} title - The title of the show note.
 * @param {string} description - A description of the show or content.
 * @param {string} publishDate - The date the show was published.
 * @param {string} coverImage - A URL to the cover image for the show.
 * @param {string} frontmatter - The original frontmatter data from the processed file.
 * @param {string} prompt - The prompt or instructions used prior to transcript.
 * @param {string} transcript - The transcript of the show content.
 * @param {string} llmOutput - The output generated by the language model (only if LLM was used).
 */
export function insertShowNote(
  showLink: string,
  channel: string,
  channelURL: string,
  title: string,
  description: string,
  publishDate: string,
  coverImage: string,
  frontmatter: string,
  prompt: string,
  transcript: string,
  llmOutput: string
): void {
  db.prepare(`
    INSERT INTO show_notes (
      showLink,
      channel,
      channelURL,
      title,
      description,
      publishDate,
      coverImage,
      frontmatter,
      prompt,
      transcript,
      llmOutput
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `).run(
    showLink,
    channel,
    channelURL,
    title,
    description,
    publishDate,
    coverImage,
    frontmatter,
    prompt,
    transcript,
    llmOutput
  )
}