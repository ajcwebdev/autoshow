---
// src/layouts/Base.astro

import { siteConfig } from "../site.config"
import "../styles/global.css"
import { Icon } from "astro-icon/components"

import type { SiteMeta } from "../types.ts"

interface Props {
	meta: SiteMeta
}

const {
	meta: { articleDate, description = siteConfig.description, ogImage, title },
} = Astro.props

const titleSeparator = "â€¢"
const siteTitle = `${title} ${titleSeparator} ${siteConfig.title}`
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(ogImage ? ogImage : "/social-card.png", Astro.url).href

const year = new Date().getFullYear()
const url = new URL(Astro.request.url)
---

<html color-mode="user" lang={siteConfig.lang}>
	<head>
		<meta charset="utf-8" />
		<meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport" />
		<meta content="IE=edge" http-equiv="X-UA-Compatible" />
		<title>{siteTitle}</title>

		{/* Icons / Favicon */}
		<link href="/favicon.ico" rel="icon" sizes="any" />
		<link href="/icon.svg" rel="icon" type="image/svg+xml" />
		<link href="/apple-touch-icon.png" rel="apple-touch-icon" />
		<link href="/manifest.webmanifest" rel="manifest" />
		<link href={canonicalURL} rel="canonical" />

		{/* Primary Meta Tags */}
		<meta content={siteTitle} name="title" />
		<meta content={description} name="description" />
		<meta content={siteConfig.author} name="author" />

		{/* Theme Colour */}
		<meta content="" name="theme-color" />

		{/* Open Graph / Facebook */}
		<meta content={articleDate ? "article" : "website"} property="og:type" />
		<meta content={title} property="og:title" />
		<meta content={description} property="og:description" />
		<meta content={canonicalURL} property="og:url" />
		<meta content={siteConfig.title} property="og:site_name" />
		<meta content={siteConfig.ogLocale} property="og:locale" />
		<meta content={socialImageURL} property="og:image" />
		<meta content="1200" property="og:image:width" />
		<meta content="630" property="og:image:height" />
		{
			articleDate && (
				<>
					<meta content={siteConfig.author} property="article:author" />
					<meta content={articleDate} property="article:published_time" />
				</>
			)
		}

		{/* Twitter */}
		<meta content="summary_large_image" property="twitter:card" />
		<meta content={canonicalURL} property="twitter:url" />
		<meta content={title} property="twitter:title" />
		<meta content={description} property="twitter:description" />
		<meta content={socialImageURL} property="twitter:image" />

		{/* Sitemap */}
		<link href="/sitemap-index.xml" rel="sitemap" />

		<meta content={Astro.generator} name="generator" />
	</head>
	<body>
		<header id="main-header" class="site-container py-4">
          <div class="flex items-center justify-between">
            <a href="/" aria-current={url.pathname === "/" ? "page" : false} class="nav__link--base h2">autoshow.sh</a>
            <button
              class="theme-toggle primary-focus nav__link--base rounded-full p-1.5"
              aria-label="color theme toggle"
            >
              <div class="theme-toggle__placeholder size-5"></div>
              <Icon name="tabler/moon-stars" class="theme-toggle__dark-icon hidden size-5" />
              <Icon name="tabler/sun" class="theme-toggle__light-icon hidden size-5" />
            </button>
          </div>
       </header>
		<main id="main" class="site-container">
			<slot />
		</main>
		<footer class="site-container py-8 mt-8 border-t border-border">
			<div class="text-muted-foreground text-sm">
				&copy; {siteConfig.author} {year}<br><span>Astro AutoShow</span>
			</div>
		</footer>
	</body>
</html>

<script>
	function changeTheme(theme: "dark" | "light") {
		if (theme === "dark") {
			document.documentElement.classList.add("dark")
		} else {
			document.documentElement.classList.remove("dark")
		}
	}

	function initThemeToggle() {
		const themeToggleLoaders = document.querySelectorAll(".theme-toggle__placeholder")
		const themeToggleDarkIcons = document.querySelectorAll(".theme-toggle__dark-icon")
		const themeToggleLightIcons = document.querySelectorAll(".theme-toggle__light-icon")
		const themeToggleBtns = document.querySelectorAll(".theme-toggle")

		let colorTheme = localStorage.getItem("colorTheme")
		
		if (!colorTheme) {
			const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
			colorTheme = prefersDark ? "dark" : "light"
			localStorage.setItem("colorTheme", colorTheme)
		}
		
		if (colorTheme === "dark") {
			changeTheme("dark")
			themeToggleLoaders.forEach((themeToggleLoader) => {
				themeToggleLoader.classList.add("hidden")
			})
			themeToggleDarkIcons.forEach((themeToggleDarkIcon) => {
				themeToggleDarkIcon.classList.remove("hidden")
			})
		} else if (colorTheme === "light") {
			changeTheme("light")
			themeToggleLoaders.forEach((themeToggleLoader) => {
				themeToggleLoader.classList.add("hidden")
			})
			themeToggleLightIcons.forEach((themeToggleLightIcon) => {
				themeToggleLightIcon.classList.remove("hidden")
			})
		}

		themeToggleBtns.forEach((themToggleBtn) => {
			themToggleBtn.addEventListener("click", function () {
				themeToggleDarkIcons.forEach((themeToggleDarkIcon) => {
					themeToggleDarkIcon.classList.toggle("hidden")
				})
				themeToggleLightIcons.forEach((themeToggleLightIcon) => {
					themeToggleLightIcon.classList.toggle("hidden")
				})

				if (localStorage.getItem("colorTheme") === "light") {
					changeTheme("dark")
					localStorage.setItem("colorTheme", "dark")
				} else {
					changeTheme("light")
					localStorage.setItem("colorTheme", "light")
				}
			})
		})
	}

	initThemeToggle()
	document.addEventListener("astro:after-swap", initThemeToggle)
</script>