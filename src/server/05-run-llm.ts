// src/server/05-run-llm.ts

import { OpenAI } from 'openai'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { dbService } from '../db.ts'
import { l, err, logInitialFunctionCall } from '../logging.ts'
import { readFile, writeFile, env } from '../utils.ts'
import { L_CONFIG } from '../../shared/constants.ts'
import type { FastifyRequest, FastifyReply } from 'fastify'
import type { ProcessingOptions, ShowNoteMetadata, LLMResult, RunLLMBody, ChatGPTModelValue, ClaudeModelValue, GeminiModelValue } from '../../shared/types.ts'

export async function callChatGPT(prompt: string, transcript: string, modelValue: ChatGPTModelValue) {
  if (!env['OPENAI_API_KEY']) throw new Error('Missing OPENAI_API_KEY')
  const openai = new OpenAI({ apiKey: env['OPENAI_API_KEY'] })
  const combinedPrompt = `${prompt}\n${transcript}`
  try {
    const response = await openai.chat.completions.create({ model: modelValue, max_completion_tokens: 4000, messages: [{ role: 'user', content: combinedPrompt }] })
    const firstChoice = response.choices[0]
    if (!firstChoice?.message?.content) throw new Error('No valid response from the API')
    const content = firstChoice.message.content
    return { content, usage: { stopReason: firstChoice.finish_reason ?? 'unknown', input: response.usage?.prompt_tokens, output: response.usage?.completion_tokens, total: response.usage?.total_tokens } }
  } catch (error) {
    err(`Error in callChatGPT: ${(error as Error).message}`)
    throw error
  }
}

export async function callClaude(prompt: string, transcript: string, modelValue: ClaudeModelValue) {
  if (!env['ANTHROPIC_API_KEY']) throw new Error('Missing ANTHROPIC_API_KEY environment variable.')
  const openai = new OpenAI({ apiKey: env['ANTHROPIC_API_KEY'], baseURL: 'https://api.anthropic.com/v1/' })
  const combinedPrompt = `${prompt}\n${transcript}`
  try {
    const response = await openai.chat.completions.create({ model: modelValue, max_completion_tokens: 4000, messages: [{ role: 'user', content: combinedPrompt }] })
    const firstChoice = response.choices[0]
    if (!firstChoice?.message?.content) throw new Error('No valid text content generated by Claude.')
    const content = firstChoice.message.content
    return { content, usage: { stopReason: firstChoice.finish_reason ?? 'unknown', input: response.usage?.prompt_tokens, output: response.usage?.completion_tokens, total: response.usage?.total_tokens } }
  } catch (error) {
    err(`Error in callClaude: ${(error as Error).message}`)
    throw error
  }
}

function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms))
}

export async function callGemini(prompt: string, transcript: string, modelValue: GeminiModelValue) {
  if (!env['GEMINI_API_KEY']) throw new Error('Missing GEMINI_API_KEY environment variable.')
  const genAI = new GoogleGenerativeAI(env['GEMINI_API_KEY'])
  const geminiModel = genAI.getGenerativeModel({ model: modelValue })
  const combinedPrompt = `${prompt}\n${transcript}`
  const maxRetries = 3
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const result = await geminiModel.generateContent(combinedPrompt)
      const response = await result.response
      const text = response.text()
      const { usageMetadata } = response
      const { promptTokenCount, candidatesTokenCount, totalTokenCount } = usageMetadata ?? {}
      return { content: text, usage: { stopReason: 'complete', input: promptTokenCount, output: candidatesTokenCount, total: totalTokenCount } }
    } catch (error) {
      err(`Error in callGemini (attempt ${attempt}/${maxRetries}): ${(error as Error).message}`)
      if (attempt === maxRetries) throw error
      await delay(2 ** attempt * 1000)
    }
  }
  throw new Error('Exhausted all Gemini API call retries without success.')
}

export async function retryLLMCall(fn: () => Promise<any>) {
  const maxRetries = 7
  let attempt = 0
  while (attempt < maxRetries) {
    try {
      attempt++
      l.dim(`  Attempt ${attempt} - Processing LLM call...\n`)
      const result = await fn()
      l.dim(`\n  LLM call completed successfully on attempt ${attempt}.`)
      return result
    } catch (error) {
      err(`  Attempt ${attempt} failed: ${(error as Error).message}`)
      if (attempt >= maxRetries) {
        err(`  Max retries (${maxRetries}) reached. Aborting LLM processing.`)
        throw error
      }
      const delayMs = 1000 * 2 ** (attempt - 1)
      l.dim(`  Retrying in ${delayMs / 1000} seconds...`)
      await new Promise(resolve => setTimeout(resolve, delayMs))
    }
  }
  throw new Error('LLM call failed after maximum retries.')
}

export async function handleRunLLM(request: FastifyRequest, reply: FastifyReply) {
  const body = request.body as RunLLMBody
  const { filePath, llmServices, options = {} } = body
  if (!filePath) {
    reply.status(400).send({ error: 'filePath is required' })
    return
  }
  const transcriptionServices = options['transcriptionServices']
  const transcriptionModel = options['transcriptionModel']
  const transcriptionCost = options['transcriptionCost']
  const metaFromBody = options['metadata']
  try {
    const raw = await readFile(filePath, 'utf8')
    const lines = raw.split('\n')
    let frontMatterLines: string[] = []
    let i = 0
    if (lines[0]?.trim() === '---') {
      i = 1
      while (i < lines.length && lines[i]?.trim() !== '---') {
        frontMatterLines.push(lines[i]!)
        i++
      }
      i++
    }
    const frontMatter = `---\n${frontMatterLines.join('\n')}\n---`
    const rest = lines.slice(i).join('\n')
    const restLines = rest.split('\n')
    const transcriptIndex = restLines.findIndex(l => l.trim() === '## Transcript')
    let prompt = ''
    let transcript = ''
    if (transcriptIndex > -1) {
      prompt = restLines.slice(0, transcriptIndex).join('\n').trim()
      transcript = restLines.slice(transcriptIndex + 1).join('\n').trim()
    }
    const metadata: ShowNoteMetadata = { showLink: '', channel: '', channelURL: '', title: '', description: '', publishDate: '', coverImage: '', walletAddress: '', mnemonic: '' }
    frontMatterLines.forEach(line => {
      if (line) {
        const m = line.match(/^(\w+):\s*"(.*?)"$/)
        if (m && m[1]) {
          const key = m[1]
          const val = m[2] || ''
          if (Object.hasOwn(metadata, key)) metadata[key as keyof ShowNoteMetadata] = val
        }
      }
    })
    if (metaFromBody) Object.assign(metadata, metaFromBody)

    l.step(`\nStep 5 - Run Language Model\n`)
    logInitialFunctionCall('handleRunLLM', { llmServices, metadata })
    metadata.walletAddress = options['walletAddress'] || metadata.walletAddress
    metadata.mnemonic = options['mnemonic'] || metadata.mnemonic

    const finalPath = filePath.replace(/\.[^/.]+$/, '')
    let showNotesResult = ''
    let userModel = ''
    const numericLLMCost = Number(options.llmCost) || 0
    if (llmServices) {
      l.dim(`\n  Preparing to process with '${llmServices}' Language Model...\n`)
      const config = L_CONFIG[llmServices as keyof typeof L_CONFIG]
      if (!config) throw new Error(`Unknown LLM service: ${llmServices}`)
      const optionValue = options[llmServices as keyof ProcessingOptions]
      const defaultModelId = config.models[0]?.modelId ?? ''
      userModel = typeof optionValue === 'string' && optionValue !== 'true' && optionValue.trim() !== '' ? optionValue : defaultModelId
      let showNotesData: LLMResult
      switch (llmServices) {
        case 'chatgpt':
          showNotesData = await retryLLMCall(() => callChatGPT(prompt, transcript, userModel as ChatGPTModelValue))
          break
        case 'claude':
          showNotesData = await retryLLMCall(() => callClaude(prompt, transcript, userModel as ClaudeModelValue))
          break
        case 'gemini':
          showNotesData = await retryLLMCall(() => callGemini(prompt, transcript, userModel as GeminiModelValue))
          break
        default:
          throw new Error(`Unknown LLM service: ${llmServices}`)
      }
      const showNotes = showNotesData.content
      const outputFilename = `${finalPath}-${llmServices}-shownotes.md`
      await writeFile(outputFilename, `${frontMatter}\n${showNotes}\n\n## Transcript\n\n${transcript}`)
      l.dim(`\n  LLM processing completed, combined front matter + LLM output + transcript written to:\n    - ${outputFilename}`)
      showNotesResult = showNotes
    } else {
      l.dim('  No LLM selected, skipping processing...')
      const noLLMFile = `${finalPath}-prompt.md`
      l.dim(`\n  Writing front matter + prompt + transcript to file:\n    - ${noLLMFile}`)
      await writeFile(noLLMFile, `${frontMatter}\n${prompt}\n## Transcript\n\n${transcript}`)
    }

    const finalCost = (transcriptionCost || 0) + numericLLMCost
    const insertedNote = {
      showLink: metadata.showLink ?? '',
      channel: metadata.channel ?? '',
      channelURL: metadata.channelURL ?? '',
      title: metadata.title,
      description: metadata.description ?? '',
      publishDate: metadata.publishDate,
      coverImage: metadata.coverImage ?? '',
      frontmatter: frontMatter,
      prompt,
      transcript,
      llmOutput: showNotesResult,
      walletAddress: metadata.walletAddress ?? '',
      mnemonic: metadata.mnemonic ?? '',
      llmService: llmServices ?? '',
      llmModel: userModel,
      llmCost: numericLLMCost,
      transcriptionService: transcriptionServices ?? '',
      transcriptionModel: transcriptionModel ?? '',
      transcriptionCost,
      finalCost
    }
    const newRecord = await dbService.insertShowNote(insertedNote)
    reply.send({ showNote: newRecord, showNotesResult })
  } catch (error) {
    reply.status(500).send({ error: (error as Error).message })
  }
}
